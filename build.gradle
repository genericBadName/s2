plugins {
    id 'fabric-loom' version '1.9-SNAPSHOT'
    id 'maven-publish'
}

version = project.mod_version
group = project.maven_group

loom {
    accessWidenerPath = file("src/main/resources/s2lib.accesswidener")
}

fabricApi {
    configureDataGeneration()
}

repositories {
    maven {
        name = 'ParchmentMC'
        url = 'https://maven.parchmentmc.org'
    }

    maven {
        name = "modrinth"
        url = "https://api.modrinth.com/maven"

        content {
            includeGroup "maven.modrinth"
        }
    }

    maven {
        url "https://cursemaven.com"
        content {
            includeGroup "curse.maven"
        }
    }

    maven {
        name = "Fuzs Mod Resources"
        url = "https://raw.githubusercontent.com/Fuzss/modresources/main/maven/"
    }
}

dependencies {
    minecraft "com.mojang:minecraft:${project.minecraft_version}"

    // Fabric
    modImplementation "net.fabricmc:fabric-loader:${project.loader_version}"
    modImplementation "net.fabricmc.fabric-api:fabric-api:${project.fabric_version}"
    testImplementation "net.fabricmc:fabric-loader-junit:${project.loader_version}"

    // Dependency Mods
    modImplementation "maven.modrinth:modmenu:${project.modmenu_version}"
    implementation "com.electronwill.night-config:core:${project.night_config_version}"
    implementation "com.electronwill.night-config:toml:${project.night_config_version}"
    modApi "fuzs.forgeconfigapiport:forgeconfigapiport-fabric:${project.forge_config_api_version}"

    // Utility
    modLocalRuntime "curse.maven:worldedit-225608:4586218"
    modLocalRuntime "maven.modrinth:forge-config-screens:v8.0.2-1.20.1-Fabric"

    mappings loom.layered() {
        officialMojangMappings()
        parchment("org.parchmentmc.data:parchment-${project.minecraft_version}:${project.parchment_version}@zip")
    }
}

test {
    useJUnitPlatform()
}

processResources {
    inputs.property "version", project.version
    filteringCharset "UTF-8"

    filesMatching("fabric.mod.json") {
        expand "version": project.version
    }
}

def targetJavaVersion = 17
tasks.withType(JavaCompile).configureEach {
    it.options.encoding = "UTF-8"
    if (targetJavaVersion >= 10 || JavaVersion.current().isJava10Compatible()) {
        it.options.release = targetJavaVersion
    }
}

java {
    def javaVersion = JavaVersion.toVersion(targetJavaVersion)
    if (JavaVersion.current() < javaVersion) {
        toolchain.languageVersion = JavaLanguageVersion.of(targetJavaVersion)
    }
    archivesBaseName = project.archives_base_name
    withSourcesJar()
}

jar {
    from("LICENSE") {
        rename { "${it}_${project.archivesBaseName}" }
    }
}

publishing {
    publications {
        mavenJava(MavenPublication) {
            from components.java
        }
    }

    repositories {

    }
}
